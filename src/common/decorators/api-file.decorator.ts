import { applyDecorators } from '@nestjs/common';
import { ApiBody } from '@nestjs/swagger';

export const ApiFile = (
  fileName: string,
  // ключ, який беремо з контролера, назва поля для файлу (або масиву файлів),
  // яке відображатиметься у Swagger (ми поле назвали - "avatar")
  isArray = true,
  // параметр, що визначає, чи буде поле файлу масивом файлів (за замовчуванням true)
  // якщо в контролері ми прописуємо false, то зможемо завантажити лише один файл
  isRequired = true,
  // параметр, що визначає, чи є це поле обов’язковим (за замовчуванням true)
): MethodDecorator => {
  return applyDecorators(
    // applyDecorators з NestJS дозволяє застосовувати кілька декораторів одночасно,
    // тобто, дає змогу застосувати декоратор ApiBody в середині ApiFile,
    // ApiBody використовується для налаштування документації параметрів запиту в Swagger
    ApiBody({
      schema: {
        type: 'object', //  встановлює тип параметра як об’єкт
        required: isRequired ? [fileName] : [],
        //  масив, що містить обов’язкові поля. Якщо isRequired дорівнює true,
        //  то поле fileName додається до списку обов'язкових
        properties: {
          [fileName]: isArray
            ? {
                type: 'array',
                items: {
                  type: 'string',
                  format: 'binary',
                  // повідомляє клієнтам, які використовують Swagger,
                  // що цей параметр потребує даних у вигляді файлу, а не текстового значення
                },
              }
            : {
                type: 'string',
                format: 'binary',
              },
        }, //  визначає поля цього об'єкта
      },
    }),
  );
};
// кастомний декоратор ApiFile,
// який налаштовує відображення форми у Swagger
// де можна завантажити файли в поле, відповідно до його налаштувань
// (що приймають файл або масив файлів, в нашому прикладі один файл)
